name: docker_containers

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build_containers:
    name: Build docker images
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          - linux_x64_musl
          - linux_aarch64
          - linux_armv7
        include:
          - build: linux_x64_musl
            rust_target_arch: x86_64-unknown-linux-musl
            os: ubuntu-latest
            docker_architecture: linux/amd64
          - build: linux_aarch64
            rust_target_arch: aarch64-unknown-linux-musl
            os: ubuntu-latest
            docker_architecture: "linux/arm64"
          - build: linux_armv7
            rust_target_arch: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            docker_architecture: "linux/arm/v7"
    steps:
    - uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Prepare
      id: prep
      run: |
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=title::${GITHUB_REPOSITORY}:${GITHUB_REF//refs\/heads\//}
        echo ::set-output name=revision::${GITHUB_SHA}
        echo ::set-output name=source::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}
        echo ::set-output name=vendor::${{ github.repository_owner }}
        echo ::set-output name=url::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md
        VERSION=$(date +"%Y%m%d%H%M%S")
        echo ::set-output name=version::${VERSION}

        echo ::set-output name=tag::${GITHUB_REPOSITORY}:latest-${{ matrix.rust_target_arch }}-alpine
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: .
        platforms: ${{ matrix.docker_architecture }}
        tags: |
          ${{ steps.prep.outputs.tag }}
          ghcr.io/${{ steps.prep.outputs.tag }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.title=${{ steps.prep.outputs.title }}
          org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
          org.opencontainers.image.source=${{ steps.prep.outputs.source }}
          org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
          org.opencontainers.image.url=${{ steps.prep.outputs.url }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
        file: ./docker/${{ matrix.rust_target_arch }}.Dockerfile
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  publish_containers:
    name: Publish docker images
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        registry: [docker.io, ghcr.io]
    needs: [build_containers]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to DockerHub
        if: matrix.registry == 'docker.io'
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        if: matrix.registry == 'ghcr.io'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Creates a manifest list to combine all architectures under one tag
      # in the docker registry.
      - name: Create manifest list file
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=${{ matrix.registry }}/${GITHUB_REPOSITORY}
          BRANCH=latest
          BASE_IMAGE=alpine
          
          MAIN_TAG=${BRANCH}
          MAIN_TAG_BASE_IMAGE=${BRANCH}-${BASE_IMAGE}
          
          SOURCE=${IMAGE}:${BRANCH}
          AMD64=${SOURCE}-x86_64-unknown-linux-musl-${BASE_IMAGE}
          ARM64=${SOURCE}-aarch64-unknown-linux-musl-${BASE_IMAGE}
          ARMV7=${SOURCE}-armv7-unknown-linux-musleabihf-${BASE_IMAGE}
          
          docker manifest create ${IMAGE}:${MAIN_TAG_BASE_IMAGE} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push ${IMAGE}:${MAIN_TAG_BASE_IMAGE}

          docker manifest create ${IMAGE}:${MAIN_TAG} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push ${IMAGE}:${MAIN_TAG}
