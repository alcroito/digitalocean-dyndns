name: release
on:
  push:
    # Used for testing release infrastructure from a specific branch.
    branches:
      - test_release
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    workflow_dispatch:
jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: "Build Changelog"
        id: build_changelog
        uses: orhun/git-cliff-action@main
        with:
          config: cliff.toml
          args: --unreleased --no-exec
        env:
          OUTPUT: GITHUB_RELEASE_CHANGELOG.md

      - name: Create GitHub release
        id: release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: ${{ github.ref_type == 'branch' }}
          draft: ${{ github.ref_type == 'tag' }}
          body: ${{ steps.build_changelog.outputs.content }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: Build release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux_x64, linux_armv7, linux_aarch64, mac_x64, mac_arm64]
        include:
          - build: linux_x64
            # building x86_64-unknown-linux-musl fails with not finding musl-gcc
            rust_target_arch: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - build: linux_armv7
            rust_target_arch: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            cross: true
          - build: linux_aarch64
            rust_target_arch: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - build: mac_x64
            rust_target_arch: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - build: mac_arm64
            rust_target_arch: aarch64-apple-darwin
            os: macos-15
            cross: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Cache cargo registry
        uses: actions/cache@v4
        if: matrix.cross == true
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: '${{ runner.os }}-cargo-registry-v2-${{ hashFiles(''**/Cargo.lock'') }}'

      - name: Cache target folder
        uses: actions/cache@v4
        if: matrix.cross == true
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-builds-${{ matrix.build }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target_arch }}

      - name: Use smart rust cache
        uses: Swatinem/rust-cache@v2
        if: matrix.cross == false
        with:
          key: ${{ matrix.build }}

      - name: Install cross
        if: matrix.cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: 24
          cache: npm
          cache-dependency-path: 'webclients/svelte/package-lock.json'

      - name: Install node packages
        run: npm ci
        working-directory: webclients/svelte

      - name: Build web app
        run: npm run build
        working-directory: webclients/svelte

      - name: Build with cargo
        run: cargo build --release --target=${{ matrix.rust_target_arch }} --features web
        if: matrix.cross == false

      - name: Build with cross
        run: cross build --release --target=${{ matrix.rust_target_arch }} --features web
        if: matrix.cross == true

      - name: Get release download URL
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: artifacts
          path: artifacts

      - name: Set release upload URL and release version
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          # Only available in next step
          echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
          echo "release upload url: $release_upload_url"

      - name: Create staging archive
        id: create_staging_archive
        uses: ./.github/actions/create_archive
        with:
          rust_target_arch: ${{ matrix.rust_target_arch }}

      - name: Upload release archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ steps.create_staging_archive.outputs.archive_name }}
          asset_name: ${{ steps.create_staging_archive.outputs.archive_name }}
          asset_content_type: application/octet-stream
